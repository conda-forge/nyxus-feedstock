From 695a8ab498ddc8196bf4e7f8e5864002d899f83d Mon Sep 17 00:00:00 2001
From: sameeul <sameeul@gmail.com>
Date: Thu, 10 Aug 2023 20:54:13 -0400
Subject: [PATCH] try something crazy

---
 CMakeLists.txt                |  53 ++--------
 cmake-modules/FindArrow.cmake | 191 ++++++++++++++++++++++++++++++++++
 src/nyx/python/nyxus/nyxus.py |   3 +
 3 files changed, 202 insertions(+), 45 deletions(-)
 create mode 100644 cmake-modules/FindArrow.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0d604b9..7445822 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,7 +26,7 @@ if(CUDA_FOUND AND USEGPU)
 			set(CUDA_ARCH_LIST "35;37;50;72;75;80;86")
 		endif()
 	elseif (CUDA_VERSION_MAJOR STREQUAL "12")
-		set(CUDA_ARCH_LIST "52;60;72;75;80;86;89;90")
+		set(CUDA_ARCH_LIST "52;60;75;80;86;89;90")
 	else() # some old CUDA version (<10)
 		set(CUDA_ARCH_LIST "50")
 	endif()
@@ -170,7 +170,7 @@ if (USEARROW)
 	# Look for installed packages the system
 	find_package(Arrow)
 
-	if (Arrow_FOUND) 
+	if (ARROW_FOUND) 
 		# Look for installed packages the system
 		find_package(Parquet)
 
@@ -306,7 +306,7 @@ endif()
  
 if(USEARROW)
 
-	list(APPEND Nyxus_LIBRARIES arrow_shared)
+	list(APPEND Nyxus_LIBRARIES ${ARROW_SHARED_LIB})
 
 	if(PARQUET_LINK_SHARED)
 		list(APPEND Nyxus_LIBRARIES parquet_shared)
@@ -315,56 +315,19 @@ if(USEARROW)
 	endif()
 
 	if (BUILD_LIB)
-		# Find Python
-		find_package(Python REQUIRED COMPONENTS Interpreter)
-
-		# Execute the Python script to find pyarrow include path
-		execute_process(
-			COMMAND ${Python_EXECUTABLE} -c "import pyarrow as pa; print(pa.get_include())"
-			OUTPUT_VARIABLE PATH_OUTPUT
-			OUTPUT_STRIP_TRAILING_WHITESPACE
-		)
-
-		# Store the path in a CMake variable
-		set(PYARROW_INCLUDE_PATH "${PATH_OUTPUT}" CACHE INTERNAL "Path to pyarrow include directory")
-		
-		# Set filename for finding pyarrow
-		set(python_filename "ci-utils/find_pyarrow.py")
-		set(python_filepath "${CMAKE_CURRENT_SOURCE_DIR}/${python_filename}")
-
-		# Execute the Python script to find pyarrow library path
-		execute_process(
-			COMMAND ${Python_EXECUTABLE} ${python_filepath}
-			OUTPUT_VARIABLE LIB_PATH_OUTPUT
-			OUTPUT_STRIP_TRAILING_WHITESPACE
-		)
-
-		# Store the path in a CMake variable
-		set(PYARROW_LIB_PATH "${LIB_PATH_OUTPUT}" CACHE INTERNAL "Path to pyarrow library directory")
-
-		if (PYARROW_INCLUDE_PATH STREQUAL "")
-			message(FATAL_ERROR "Pyarrow library not found.")
-		endif()
-
-		if (PYARROW_LIB_PATH STREQUAL "")
-			message(FATAL_ERROR "Pyarrow library not found.")
-		endif()
-
-		# Print the path
-		message(STATUS "PyArrow Include Path: ${PYARROW_INCLUDE_PATH}")
-		message(STATUS "PyArrow Include Path: ${PYARROW_LIB_PATH}")
 
 		# add pyarrow include path
-		include_directories(${PYARROW_INCLUDE_PATH})
+		include_directories(${PYARROW_INCLUDE_DIR})
 
-		target_link_libraries(backend PRIVATE ${PYARROW_LIB_PATH} )
+		list(APPEND Nyxus_LIBRARIES ${ARROW_PYTHON_SHARED_LIB} )
+		message(STATUS "PyArrow Include Dir ${PYARROW_INCLUDE_DIR}")
 
-		target_link_libraries(backend PRIVATE ${Python_INCLUDE_DIRS})
+		#target_link_libraries(backend PRIVATE ${Python_INCLUDE_DIRS})
 
 	endif()
 
 endif()
-
+message (STATUS "Nyxus libraries ${Nyxus_LIBRARIES}")
 if(BUILD_LIB)
 	target_compile_definitions(backend PRIVATE WITH_PYTHON_H)
 	# VERSION_INFO is defined by setup.py and passed into the C++ code as a define (VERSION_INFO) here.
diff --git a/cmake-modules/FindArrow.cmake b/cmake-modules/FindArrow.cmake
new file mode 100644
index 0000000..c3debff
--- /dev/null
+++ b/cmake-modules/FindArrow.cmake
@@ -0,0 +1,191 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+# - Find ARROW (arrow/api.h, libarrow.so)
+# This module defines
+#  ARROW_INCLUDE_DIR, directory containing headers
+#  PYARROW_INCLUDE_DIR, directory containing headers
+#  ARROW_LIBS, directory containing arrow libraries
+#  ARROW_SHARED_LIB, path to libarrow's shared library
+#  ARROW_FOUND, whether arrow has been found
+
+include(FindPkgConfig)
+
+unset(ARROW_FOUND)
+
+if (NOT "$ENV{ARROW_HOME}" STREQUAL "")
+  set(ARROW_HOME "$ENV{ARROW_HOME}")
+elseif(NOT "$ENV{CONDA_PREFIX}" STREQUAL "")
+  set(ARROW_HOME "$ENV{CONDA_PREFIX}")
+endif()
+
+if (NOT ARROW_HOME)
+  pkg_check_modules(ARROW arrow)
+  if (ARROW_FOUND)
+    pkg_get_variable(ARROW_ABI_VERSION arrow abi_version)
+    message(STATUS "Arrow ABI version: ${ARROW_ABI_VERSION}")
+    pkg_get_variable(ARROW_SO_VERSION arrow so_version)
+    message(STATUS "Arrow SO version: ${ARROW_SO_VERSION}")
+    set(ARROW_INCLUDE_DIR ${ARROW_INCLUDE_DIRS})
+    execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "import pyarrow as pa; print(pa.get_include());"
+                RESULT_VARIABLE _PYARROW_SEARCH_SUCCESS
+                OUTPUT_VARIABLE PYARROW_INCLUDE_DIR
+                ERROR_VARIABLE _PYARROW_ERROR_VALUE
+                OUTPUT_STRIP_TRAILING_WHITESPACE)
+    set(ARROW_LIBS ${ARROW_LIBRARY_DIRS})
+    set(ARROW_SEARCH_LIB_PATH ${ARROW_LIBRARY_DIRS})
+  elseif(DEFINED ENV{VIRTUAL_ENV})
+    execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "import pyarrow as pa; print(pa.get_include());"
+                RESULT_VARIABLE _PYARROW_SEARCH_SUCCESS
+                OUTPUT_VARIABLE PYARROW_INCLUDE_DIR
+                ERROR_VARIABLE _PYARROW_ERROR_VALUE
+                OUTPUT_STRIP_TRAILING_WHITESPACE)
+    set(ARROW_INCLUDE_DIR ${PYARROW_INCLUDE_DIR})
+    execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "import pyarrow as pa; print(pa.get_library_dirs());"
+            RESULT_VARIABLE _PYARROW_SEARCH_SUCCESS
+            OUTPUT_VARIABLE _PYARROW_VALUES_OUTPUT
+            ERROR_VARIABLE _PYARROW_ERROR_VALUE
+            OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+    # convert to the path needed
+    string(REGEX REPLACE "," ";" _PYARROW_VALUES ${_PYARROW_VALUES_OUTPUT})
+    string(REGEX REPLACE "\\]" "" _PYARROW_VALUES ${_PYARROW_VALUES})
+    string(REGEX REPLACE "\\[" "" _PYARROW_VALUES ${_PYARROW_VALUES})
+    list(GET _PYARROW_VALUES 0 ARROW_SEARCH_LIB_PATH)
+  else()
+    if (MSVC)
+      find_path(ARROW_INCLUDE_DIR arrow/api.h HINTS
+        $ENV{PYTHON}/lib/site-packages/pyarrow/include)
+      execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "import pyarrow as pa; print(pa.get_include());"
+                RESULT_VARIABLE _PYARROW_SEARCH_SUCCESS
+                OUTPUT_VARIABLE PYARROW_INCLUDE_DIR
+                ERROR_VARIABLE _PYARROW_ERROR_VALUE
+                OUTPUT_STRIP_TRAILING_WHITESPACE)
+    else()
+      find_path(ARROW_INCLUDE_DIR arrow/api.h HINTS
+        /usr/local/lib/*/dist-packages/pyarrow/include)
+      execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "import pyarrow as pa; print(pa.get_include());"
+                RESULT_VARIABLE _PYARROW_SEARCH_SUCCESS
+                OUTPUT_VARIABLE PYARROW_INCLUDE_DIR
+                ERROR_VARIABLE _PYARROW_ERROR_VALUE
+                OUTPUT_STRIP_TRAILING_WHITESPACE)
+    endif()
+    get_filename_component(ARROW_SEARCH_LIB_PATH ${ARROW_INCLUDE_DIR} DIRECTORY)
+    set(ARROW_SEARCH_HEADER_PATHS ${ARROW_INCLUDE_DIR})
+    message(STATUS "Found candidate Arrow location: ${ARROW_SEARCH_LIB_PATH}")
+  endif()
+else()
+  message(STATUS "Using ARROW_HOME set to ${ARROW_HOME} to look for Arrow libraries")
+  if (MSVC)
+    set(ARROW_SEARCH_HEADER_PATHS ${ARROW_HOME}/Library/include)
+    set(ARROW_SEARCH_LIB_PATH ${ARROW_HOME}/Library/lib)
+  else()
+    set(ARROW_SEARCH_HEADER_PATHS ${ARROW_HOME}/include)
+    set(ARROW_SEARCH_LIB_PATH ${ARROW_HOME}/lib)
+  endif()
+
+  execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "import pyarrow as pa; print(pa.get_include());"
+                RESULT_VARIABLE _PYARROW_SEARCH_SUCCESS
+                OUTPUT_VARIABLE PYARROW_INCLUDE_DIR
+                ERROR_VARIABLE _PYARROW_ERROR_VALUE
+                OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+  find_path(ARROW_INCLUDE_DIR arrow/api.h PATHS
+    ${ARROW_SEARCH_HEADER_PATHS}
+    # make sure we don't accidentally pick up a different version
+    NO_DEFAULT_PATH
+    )
+endif()
+
+if (MSVC)
+  SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
+endif()
+
+find_library(ARROW_LIB_PATH NAMES arrow
+  PATHS
+  ${ARROW_SEARCH_LIB_PATH}
+  NO_DEFAULT_PATH)
+message(STATUS "Found ${ARROW_LIB_PATH} in ${ARROW_SEARCH_LIB_PATH}")
+get_filename_component(ARROW_LIBS ${ARROW_LIB_PATH} DIRECTORY)
+
+if (MSVC AND ARROW_HOME)
+  set(ARROW_SEARCH_LIB_PATH_EXT ${ARROW_HOME}/lib/site-packages/pyarrow)
+endif()
+
+find_library(ARROW_PYTHON_LIB_PATH NAMES arrow_python
+    PATHS
+    ${ARROW_SEARCH_LIB_PATH_EXT}
+    ${ARROW_SEARCH_LIB_PATH}/*/site-packages/pyarrow
+    ${ARROW_SEARCH_LIB_PATH}
+  DOC "Path to libarrow_python shared object"
+  NO_DEFAULT_PATH)
+
+if (MSVC)
+  find_library(ARROW_PYTHON_IMP_LIB_PATH NAMES arrow_python.lib
+      PATHS
+      ${ARROW_SEARCH_LIB_PATH_EXT}
+      ${ARROW_SEARCH_LIB_PATH}/*/site-packages/pyarrow
+      ${ARROW_SEARCH_LIB_PATH}
+    DOC "Path to the arrow_python.lib implementation lib"
+    NO_DEFAULT_PATH)
+endif()
+
+if (ARROW_INCLUDE_DIR AND ARROW_LIBS)
+  set(ARROW_FOUND TRUE)
+
+  set(ARROW_LIB_NAME arrow)
+  set(ARROW_PYTHON_LIB_NAME arrow_python)
+
+  if (MSVC)
+    set(ARROW_SHARED_LIB ${ARROW_LIBS}/${ARROW_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
+    set(ARROW_PYTHON_SHARED_LIB ${ARROW_PYTHON_IMP_LIB_PATH})
+    set(ARROW_SHARED_IMP_LIB ${ARROW_LIBS}/${ARROW_LIB_NAME}.lib)
+    set(ARROW_PYTHON_SHARED_IMP_LIB ${ARROW_PYTHON_IMP_LIB_PATH})
+  else()
+    set(ARROW_SHARED_LIB ${ARROW_LIBS}/libarrow${CMAKE_SHARED_LIBRARY_SUFFIX})
+    set(ARROW_PYTHON_SHARED_LIB ${ARROW_PYTHON_LIB_PATH})
+  endif()
+endif()
+
+if (ARROW_FOUND)
+  if (NOT Arrow_FIND_QUIETLY)
+    message(STATUS "Found the Arrow core library: ${ARROW_LIB_PATH}")
+    message(STATUS "Found the Arrow Python library: ${ARROW_PYTHON_LIB_PATH}")
+  endif ()
+else ()
+  if (NOT Arrow_FIND_QUIETLY)
+    set(ARROW_ERR_MSG "Could not find the Arrow library. Looked for headers")
+    set(ARROW_ERR_MSG "${ARROW_ERR_MSG} in ${ARROW_SEARCH_HEADER_PATHS}, and for libs")
+    set(ARROW_ERR_MSG "${ARROW_ERR_MSG} in ${ARROW_SEARCH_LIB_PATH}")
+    if (Arrow_FIND_REQUIRED)
+      message(FATAL_ERROR "${ARROW_ERR_MSG}")
+    else (Arrow_FIND_REQUIRED)
+      message(STATUS "${ARROW_ERR_MSG}")
+    endif (Arrow_FIND_REQUIRED)
+  endif ()
+  set(ARROW_FOUND FALSE)
+endif ()
+
+message(STATUS "Arrow Python Shared Lib ${ARROW_PYTHON_SHARED_LIB}")
+
+mark_as_advanced(
+  ARROW_INCLUDE_DIR
+  PYARROW_INCLUDE_DIR
+  ARROW_SHARED_LIB
+  ARROW_PYTHON_SHARED_LIB
+  ARROW_JEMALLOC_SHARED_LIB
+)
\ No newline at end of file
diff --git a/src/nyx/python/nyxus/nyxus.py b/src/nyx/python/nyxus/nyxus.py
index ff26e63..ed59cf8 100644
--- a/src/nyx/python/nyxus/nyxus.py
+++ b/src/nyx/python/nyxus/nyxus.py
@@ -28,6 +28,9 @@ import pyarrow as pa
 from typing import Optional, List
 
 #pa.import_pyarrow()
+if os.sys.platform == "win32":
+    for lib_dir in pa.get_library_dirs():
+        os.add_dll_directory(lib_dir)
 
 class Nyxus:
     """Nyxus image feature extraction library
-- 
2.30.2

