diff --git a/CMakeLists.txt b/CMakeLists.txt
index d9c5572..f7488e6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -239,6 +239,7 @@ set(SOURCE
 	src/nyx/workflow_3d_segmented.cpp
 	src/nyx/workflow_3d_whole.cpp
 	src/nyx/workflow_pythonapi.cpp
+	src/nyx/dicom_util.cpp
 )
 
 # CLI
diff --git a/src/nyx/dicom_util.cpp b/src/nyx/dicom_util.cpp
new file mode 100644
index 0000000..768b0c8
--- /dev/null
+++ b/src/nyx/dicom_util.cpp
@@ -0,0 +1,31 @@
+#include "dicom_util.h"
+
+// Helper: Determine if the transfer syntax is uncompressed
+bool isUncompressedXfer(E_TransferSyntax xfer)
+{
+    return xfer == EXS_LittleEndianExplicit ||
+           xfer == EXS_LittleEndianImplicit ||
+           xfer == EXS_BigEndianExplicit;
+}
+
+Uint32 getFrameSize(DcmDataset* dataset)
+{
+    DcmElement* elem = nullptr;
+    if (dataset->findAndGetElement(DCM_PixelData, elem).bad() || !elem)
+        return 0;
+
+    DcmPixelData* pixelData = dynamic_cast<DcmPixelData*>(elem);
+    if (!pixelData)
+        return 0;
+
+    Uint32 frameSize = 0;
+    OFCondition status;
+
+    E_TransferSyntax xfer = dataset->getOriginalXfer();
+    bool isUncompressed = isUncompressedXfer(xfer);
+
+
+    status = pixelData->getUncompressedFrameSize(dataset, frameSize, isUncompressed);
+
+    return status.good() ? frameSize : 0;
+}
diff --git a/src/nyx/dicom_util.h b/src/nyx/dicom_util.h
new file mode 100644
index 0000000..f1dab2f
--- /dev/null
+++ b/src/nyx/dicom_util.h
@@ -0,0 +1,9 @@
+#pragma once
+
+#include "dcmtk/config/osconfig.h"
+#include "dcmtk/dcmdata/dctk.h"
+#include "dcmtk/dcmdata/dcpixel.h"
+#include "dcmtk/dcmdata/dcdeftag.h"
+
+bool isUncompressedXfer(E_TransferSyntax xfer);
+Uint32 getFrameSize(DcmDataset* dataset);
\ No newline at end of file
diff --git a/src/nyx/nyxus_dicom_loader.h b/src/nyx/nyxus_dicom_loader.h
index a417331..d4e9fba 100644
--- a/src/nyx/nyxus_dicom_loader.h
+++ b/src/nyx/nyxus_dicom_loader.h
@@ -1,6 +1,7 @@
 #ifdef DICOM_SUPPORT
 #pragma once
 #include "abs_tile_loader.h"
+#include "dicom_util.h"
 #include "dcmtk/dcmjpeg/djdecode.h"  /* for JPEG decoders */
 #include "dcmtk/dcmjpls/djdecode.h"  /* for JPEG-LS decoders */
 #include "dcmtk/dcmdata/dcrledrg.h"  /* for RLE decoder */
@@ -231,8 +232,7 @@ private:
         auto status = ds->findAndGetElement(DCM_PixelData, pixel_data_ptr);
         if(status.good()){
             DcmPixelData* pixel_data = OFreinterpret_cast(DcmPixelData*, pixel_data_ptr);
-            uint32_t frame_size = 0;
-            pixel_data->getUncompressedFrameSize(ds,frame_size);
+            uint32_t frame_size = getFrameSize(ds);
             frame_size % 2 == 0 ? frame_size = frame_size : frame_size = frame_size + 1; // need to be even
 
             auto buffer = std::vector<FileType>(data_length);
diff --git a/src/nyx/raw_dicom.h b/src/nyx/raw_dicom.h
index 9d8e683..46b446d 100644
--- a/src/nyx/raw_dicom.h
+++ b/src/nyx/raw_dicom.h
@@ -1,6 +1,7 @@
 #pragma once
 
 #ifdef DICOM_SUPPORT
+#include "dicom_util.h"
 #include "dcmtk/dcmjpeg/djdecode.h"  /* for JPEG decoders */
 #include "dcmtk/dcmjpls/djdecode.h"  /* for JPEG-LS decoders */
 #include "dcmtk/dcmdata/dcrledrg.h"  /* for RLE decoder */
@@ -252,8 +253,7 @@ private:
         auto status = ds->findAndGetElement(DCM_PixelData, pixel_data_ptr);
         if (status.good()) {
             DcmPixelData* pixel_data = OFreinterpret_cast(DcmPixelData*, pixel_data_ptr);
-            uint32_t frame_size = 0;
-            pixel_data->getUncompressedFrameSize(ds, frame_size);
+            uint32_t frame_size = getFrameSize(ds);
             frame_size % 2 == 0 ? frame_size = frame_size : frame_size = frame_size + 1; // need to be even
 
             auto buffer = std::vector<FileType>(data_length);
