From 5e7c77e85e009019f16b8bd33d3a956bfd9a8215 Mon Sep 17 00:00:00 2001
From: sameeul <sameeul@gmail.com>
Date: Tue, 1 Nov 2022 12:32:33 -0400
Subject: [PATCH] Fix CUDA Arch issue

---
 CMakeLists.txt       | 71 +++++++++++++++++++++++++++++---------------
 tests/CMakeLists.txt | 24 +++++++++++----
 2 files changed, 66 insertions(+), 29 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4a845e1..a8c2c61 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,15 +8,28 @@ endif()
 
 find_package(CUDA)
 option(USEGPU "Use GPU" ON)
+set(CUDA_ARCH_LIST "50") # default
 if(CUDA_FOUND AND USEGPU)
 	set(USEGPU ON)
 	if (CUDA_VERSION_MAJOR STREQUAL "10")
-		set(CUDA_ARCH_LIST "35;37;50;72;75")
+		if(WIN32)
+			set(CUDA_ARCH_LIST "35;37;50;72")
+		else()
+			set(CUDA_ARCH_LIST "35;37;50;72;75")
+		endif()
 	elseif (CUDA_VERSION_MAJOR STREQUAL "11")
 		if(CUDA_VERSION_MINOR STREQUAL "0")
-			set(CUDA_ARCH_LIST "35;37;50;72;75")
+			if(WIN32)
+				set(CUDA_ARCH_LIST "35;37;50;72")
+			else()
+				set(CUDA_ARCH_LIST "35;37;50;72;75")
+			endif()
 		elseif (CUDA_VERSION_MINOR STREQUAL "1" OR CUDA_VERSION_MINOR STREQUAL "2")
-			set(CUDA_ARCH_LIST "35;37;50;72;75;80;86")
+			if(WIN32)
+				set(CUDA_ARCH_LIST "35;37;50;72;75;80")
+			else()
+				set(CUDA_ARCH_LIST "35;37;50;72;75;80;86")
+			endif()
 		endif()
 	endif()
 elseif((NOT CUDA_FOUND) AND USEGPU)
@@ -33,6 +46,9 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 if(USEGPU)
     enable_language("CUDA")
+	SET(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
+	set_property(GLOBAL PROPERTY CUDA_ARCHITECTURES "${CUDA_ARCH_LIST}")
+	message("Building with compute capability for ${CUDA_ARCH_LIST}.")
     add_definitions(-DUSE_GPU)
 	if (CUDA_VERSION_MAJOR STREQUAL "10")
 		set(CMAKE_CUDA_STANDARD 14)
@@ -43,10 +59,12 @@ if(USEGPU)
 endif()
 
 #since xtensor does not built with GCC 7.5 and lower
+option(OMEZARR "Support OMEZarr" ON)
 if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
 	if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.5) 
 		add_definitions(-DOMEZARR_SUPPORT)
 	else()
+		set(OMEZARR OFF)
 		message(WARNING "OMEZarr support is not available with GCC 7.5 and older compiler.")
 	endif()
 else()
@@ -165,30 +183,32 @@ if (TIFF_FOUND)
 endif (TIFF_FOUND)
 
 #== Required for OMEZarr 
-find_package(BLOSC REQUIRED)
-if(BLOSC_FOUND)
-	target_compile_definitions(backend PRIVATE -DWITH_BLOSC)
-	target_link_libraries(backend PRIVATE ${BLOSC_LIBRARIES})
-	if(BUILD_CLI)
-		target_compile_definitions(nyxus PRIVATE -DWITH_BLOSC)
-		target_compile_definitions(nyxushie PRIVATE -DWITH_BLOSC) 	
-		target_link_libraries(nyxus PRIVATE ${BLOSC_LIBRARIES})	
-		target_link_libraries(nyxushie PRIVATE ${BLOSC_LIBRARIES})	
+if(OMEZARR)
+	find_package(BLOSC REQUIRED)
+	if(BLOSC_FOUND)
+		target_compile_definitions(backend PRIVATE -DWITH_BLOSC)
+		target_link_libraries(backend PRIVATE ${BLOSC_LIBRARIES})
+		if(BUILD_CLI)
+			target_compile_definitions(nyxus PRIVATE -DWITH_BLOSC)
+			target_compile_definitions(nyxushie PRIVATE -DWITH_BLOSC) 	
+			target_link_libraries(nyxus PRIVATE ${BLOSC_LIBRARIES})	
+			target_link_libraries(nyxushie PRIVATE ${BLOSC_LIBRARIES})	
+		endif()
 	endif()
+	
+	find_package(Boost REQUIRED)
+	if(Boost_FOUND)
+		include_directories(${Boost_INCLUDE_DIR})
+	endif()
+	
+	find_package(nlohmann_json REQUIRED)
+	if(nlohmann_json_FOUND)
+		include_directories(${nlohmann_json_INCLUDE_DIR})
+	endif()
+	
+	find_file(Z5 "z5/z5.hxx" REQUIRED)	
 endif()
 
-find_package(Boost REQUIRED)
-if(Boost_FOUND)
-	include_directories(${Boost_INCLUDE_DIR})
-endif()
-
-find_package(nlohmann_json REQUIRED)
-if(nlohmann_json_FOUND)
-	include_directories(${nlohmann_json_INCLUDE_DIR})
-endif()
-
-find_file(Z5 "z5/z5.hxx" REQUIRED)
-
 find_package(Threads QUIET)
 if (Threads_FOUND)
     if (CMAKE_USE_PTHREADS_INIT)
@@ -200,6 +220,7 @@ else ()
 endif ()
 
 if(USEGPU)
+	include_directories("${CUDA_INCLUDE_DIRS}")
 	set(GPU_SOURCE_FILES
 		src/nyx/gpu/gpu_helpers.cu
 		src/nyx/gpu/image_moments.cu
@@ -212,10 +233,12 @@ if(USEGPU)
 	endif()
 
 	target_link_libraries(backend PRIVATE ${CUDA_LIBRARIES} ${CUDA_CUFFT_LIBRARIES})
+	message("Building backend with compute capability for ${CUDA_ARCH_LIST}.")
 	set_target_properties(backend PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
 	target_link_libraries(backend PRIVATE nyxus_gpu)
 	if(BUILD_CLI)
 		target_link_libraries(nyxus PRIVATE nyxus_gpu)
+		message("Building Nyxus with compute capability for ${CUDA_ARCH_LIST}.")
 		target_link_libraries(nyxus PRIVATE ${CUDA_LIBRARIES} ${CUDA_CUFFT_LIBRARIES})
 		set_target_properties(nyxus PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
 	endif()
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 7f0c9c7..b79ca7c 100755
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -13,15 +13,28 @@ include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})
 option(USEGPU "Use GPU" ON)
 find_package(CUDA)
 
+set(CUDA_ARCH_LIST "50") # default
 if(CUDA_FOUND AND USEGPU)
-	set(USEGPU ON)
+	set(USEGPU ON)	
 	if (CUDA_VERSION_MAJOR STREQUAL "10")
-		set(CUDA_ARCH_LIST "35;37;50;72;75")
+		if(WIN32)
+			set(CUDA_ARCH_LIST "35;37;50;72")
+		else()
+			set(CUDA_ARCH_LIST "35;37;50;72;75")
+		endif()
 	elseif (CUDA_VERSION_MAJOR STREQUAL "11")
 		if(CUDA_VERSION_MINOR STREQUAL "0")
-			set(CUDA_ARCH_LIST "35;37;50;72;75")
+			if(WIN32)
+				set(CUDA_ARCH_LIST "35;37;50;72")
+			else()
+				set(CUDA_ARCH_LIST "35;37;50;72;75")
+			endif()
 		elseif (CUDA_VERSION_MINOR STREQUAL "1" OR CUDA_VERSION_MINOR STREQUAL "2")
-			set(CUDA_ARCH_LIST "35;37;50;72;75;80;86")
+			if(WIN32)
+				set(CUDA_ARCH_LIST "35;37;50;72;75;80")
+			else()
+				set(CUDA_ARCH_LIST "35;37;50;72;75;80;86")
+			endif()
 		endif()
 	endif()
 elseif((NOT CUDA_FOUND) AND USEGPU)
@@ -111,11 +124,12 @@ if(USEGPU)
 	)
 
 	target_sources(runAllTests PRIVATE ${GPU_SOURCE_FILES})
-	
+	include_directories("${CUDA_INCLUDE_DIRS}")
 	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
 		target_compile_options(runAllTests PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-fPIC>)
 	endif()
 	target_link_libraries(runAllTests PRIVATE ${CUDA_LIBRARIES} ${CUDA_CUFFT_LIBRARIES})
+	message("Building tests with compute capability for ${CUDA_ARCH_LIST}.")
 	set_target_properties(runAllTests PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
 
 endif()
-- 
2.30.2

